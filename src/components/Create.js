import { useState } from 'react';

const Create = () => {
  // It is important to track user input in the form and use it as a state. User input is tracked with 'value' property in input fields. Change in the input is tracked with 'onChange' property that triggers the setState method for that state in an anonymous function. Later this new blog added will be updated to db.json file.

  // Initial state is set to empty string and later updated with the user input value:
  const [title, setTitle] = useState('');
  const [body, setBody] = useState('');
  const [author, setAuthor] = useState('makku');

  // Initial state for loading (this state is specific for Create component) is set to false as the request is sent after sumbitting the form:
  const [isLoading, setIsLoading] = useState(false);

  // Handle Submit
  const handleSubmit = (e) => {
    // default behaviour of submission is prevented that prevents page refresh, and the form input values are tracked and used to create 'blog' object that is updated to db.json later:
    e.preventDefault();

    const blog = { title, body, author };
    // 'id' is also needed for a blog object but is not created here as it will be automatically generated by json-server during a POST request.

    // console.log(blog); // new object created is logged

    // On sumbitting, POST request is triggered below and now isLoading state must be set to 'true' as it takes time:
    setIsLoading(true);

    // Add new blog created, with POST request:
    fetch('http://localhost:5000/blogs', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(blog),

      // json-server adds 'id' property automatically with this.
    }).then(() => {
      console.log('new blog added');

      // Once the request is completed here, isLoading must be set to 'false':
      setIsLoading(false);
    });
  };

  return (
    <div className="create">
      <h2>Add a new blog</h2>

      {/* On form submission, handleSubmit function is triggered that creates 'blog' object which is then updated to db.json with POST request: */}
      <form onSubmit={handleSubmit}>
        <label>Blog Title:</label>
        <input
          type="text"
          required
          value={title} // user input for title is tracked
          onChange={(e) => setTitle(e.target.value)} // state is updated to user input value
        />

        <label>Blog Body:</label>
        <textarea
          type="text"
          required
          value={body} // user input for body is tracked
          onChange={(e) => setBody(e.target.value)} // state is updated to user input value
        ></textarea>

        <label>Blog Author:</label>
        <select value={author} onChange={(e) => setAuthor(e.target.value)}>
          <option value="raaghu">raaghu</option>
          <option value="raani">raani</option>
          <option value="makku">makku</option>
        </select>

        {/* If isLoading is false, button must say 'Add Blog' and enabled. If false, the button must say 'Adding Blog...' and diabled: */}

        {!isLoading && <button>Add Blog</button>}
        {isLoading && <button disabled>Adding Blog...</button>}

        {/* To check if the values are getting tracked by displaying: */}
        {/* <p>{title}</p>
        <p>{body}</p>
        <p>{author}</p> */}
      </form>
    </div>
  );
};

export default Create;
